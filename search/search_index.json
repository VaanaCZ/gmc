{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Gothic Modding Community page This GitHub page is designed to contains community maintained set of articles, tutorials and documentation for everything Gothic. First two Gothic games use the engine called ZenGin developed by Pranha Bytes and Mad Scientists. If you want to know more about the history of the development, there is a heap of information on the Gothic Archive . The content here is not meant to be taken as the holy word of modding. We are just modders sharing our experiences, knowledge and our favorite workflows. Feel free to open a pull request with your article, or propose changes. You can open a pull request in the this repository Note Work in progress","title":"Home"},{"location":"#welcome-to-gothic-modding-community-page","text":"This GitHub page is designed to contains community maintained set of articles, tutorials and documentation for everything Gothic. First two Gothic games use the engine called ZenGin developed by Pranha Bytes and Mad Scientists. If you want to know more about the history of the development, there is a heap of information on the Gothic Archive . The content here is not meant to be taken as the holy word of modding. We are just modders sharing our experiences, knowledge and our favorite workflows. Feel free to open a pull request with your article, or propose changes. You can open a pull request in the this repository Note Work in progress","title":"Welcome to Gothic Modding Community page"},{"location":"AniEventBlocks/","text":"Animation event blocks With animations we often need to perform some other actions, like playing a sound effect, inserting item into NPCs hand or changing a item instance into a different one (turning a raw steel into hot raw steel). Example: ani ( \"s_RunL\" 1 \"s_RunL\" 0.0 0.1 M . \"Hum_RunLoop_M01.asc\" F 12 31 ) { * eventSFXGrnd ( 12 \"Run\" ) * eventSFXGrnd ( 21 \"Run\" ) } The example shows the animation and its event block. We place these events into a block surrounded by curly brackets. There are many events to choose from to choose from, here are some examples: Sound effects * eventSFXGrnd ( 12 \"Run\" ) * eventSFX ( 10 \"Swim\" ) Particle effects * eventPFX ( 12 \"ZMODELLANDDUST\" \"Bip01\" ) * eventPFX ( 35 1 \"BUBBLES\" \"BIP01 HEAD\" ATTACH ) * eventPFXStop ( 45 1 ) Morph mesh animations Heads are animated using morph meshes, this feature is not used as much in the original game, but Chronicles of Myrtana uses it quite a lot. I hope to write about morphMesh animation too in the future. * eventMMStartAni ( 14 \"T_HURT\" ) Event tags * eventTag ( 5 \"DEF_FIGHTMODE\" \"\" ) * eventTag ( 0 \"DEF_HIT_LIMB\" \"ZS_RIGHTHAND\" ) * eventTag ( 0 \"DEF_OPT_FRAME\" \"6\" ) * eventTag ( 0 \"DEF_HIT_END\" \"29\" ) * eventTag ( 0 \"DEF_WINDOW\" \"18 35\" ) * eventTa ( 4 \"DEF_INSERT_ITEM\" \"ZS_LEFTHAND\" ) * eventTa ( 4 \"DEF_CREATE_ITEM\" \"ZS_RIGHTHAND\" \"ItMw_1H_Sledgehammer_01\" ) * eventTa ( 9 \"DEF_EXCHANGE_ITEM\" \"ZS_LEFTHAND\" \"ItMiSwordbladehot\" ) * eventTa ( 4 \"DEF_REMOVE_ITEM\" )","title":"EventBlocks"},{"location":"AniEventBlocks/#animation-event-blocks","text":"With animations we often need to perform some other actions, like playing a sound effect, inserting item into NPCs hand or changing a item instance into a different one (turning a raw steel into hot raw steel). Example: ani ( \"s_RunL\" 1 \"s_RunL\" 0.0 0.1 M . \"Hum_RunLoop_M01.asc\" F 12 31 ) { * eventSFXGrnd ( 12 \"Run\" ) * eventSFXGrnd ( 21 \"Run\" ) } The example shows the animation and its event block. We place these events into a block surrounded by curly brackets. There are many events to choose from to choose from, here are some examples: Sound effects * eventSFXGrnd ( 12 \"Run\" ) * eventSFX ( 10 \"Swim\" ) Particle effects * eventPFX ( 12 \"ZMODELLANDDUST\" \"Bip01\" ) * eventPFX ( 35 1 \"BUBBLES\" \"BIP01 HEAD\" ATTACH ) * eventPFXStop ( 45 1 ) Morph mesh animations Heads are animated using morph meshes, this feature is not used as much in the original game, but Chronicles of Myrtana uses it quite a lot. I hope to write about morphMesh animation too in the future. * eventMMStartAni ( 14 \"T_HURT\" ) Event tags * eventTag ( 5 \"DEF_FIGHTMODE\" \"\" ) * eventTag ( 0 \"DEF_HIT_LIMB\" \"ZS_RIGHTHAND\" ) * eventTag ( 0 \"DEF_OPT_FRAME\" \"6\" ) * eventTag ( 0 \"DEF_HIT_END\" \"29\" ) * eventTag ( 0 \"DEF_WINDOW\" \"18 35\" ) * eventTa ( 4 \"DEF_INSERT_ITEM\" \"ZS_LEFTHAND\" ) * eventTa ( 4 \"DEF_CREATE_ITEM\" \"ZS_RIGHTHAND\" \"ItMw_1H_Sledgehammer_01\" ) * eventTa ( 9 \"DEF_EXCHANGE_ITEM\" \"ZS_LEFTHAND\" \"ItMiSwordbladehot\" ) * eventTa ( 4 \"DEF_REMOVE_ITEM\" )","title":"Animation event blocks"},{"location":"Animation/","text":"Animation Info Some of the videos that I write about in the text bellow are in this play-list . Acknowledgment This tutorial wouldn't be possible without the ZenGin documentation available in the mod-kit, Mark56 who helped me understand animations in the first place. [Fawkes] and his request for me to do some animations for his excellent mod - Replay Mod. And flosha from the Phoenix team, who was the one, to whom I offered to write this tutorial, to help with the development of the Phoenix project . Animations in ZenGin Animations (apart from maybe advanced programming work using Ikarus or Union) are on of the most advanced modding techniques, since you not only must understand the way they work, but also know how to write the animation script and understand the whole sceme selection system, naming convention and of course know how to animate (that is my biggest problem :D). To get a new animation into ZenGin (the Gothic engine) is not difficult per se, I would describe it as tedious. Luckily, there are tools to help us to achieve our goal - get a new animation to be used by the engine, and in effect, to be used and seen in the game. To describe the whole process, I constructed this small tutorial, to help other people to get animations working and to spare them many hours of searching the excellent forum posts, that describe parts of the process. Prerequisites - Tools & Materials Gothic MDK (Mod Development Kit) Gothic 1 MDK - link Gothic 2 MDK - link Blender Kerrax's Import Export plugin - follow the installation instructions to install the plugin, make sure to set up the texture paths too Tool for decompiling animations GothicSourcer , or use phoenix or write your own using ZenLib The work flow This is the basic step-by-step on how to get the animation into the game. Load the actor (character or object) into your 3D software Create your animation Export the animation as an .asc file Write the MDS file Run the game to compile your animations Test your animations in-game using a Daedalus script or a console command That all sound great, but how do you actually do it? Even though, the steps start with loading the actor into blender, I think it is much more important, to understand the system of animations, to get high quality assets into your mod. Animation \"types\" There are two main types of animations - skeletal and morphmesh animations. Character body animations are skeletal - meaning we animate a skeleton and the entire model (skin) moves around it. And the morph mesh animation, that is used for facial animations (eating, blinking, talking,...) and for animated meshes (wavy water ferns, fish in Khorinis' harbor,...). The animations we are concerned with are the skeletal ones. I divide them into few types myself - I hope to have a demonstration on how to make each on of them. Standalone animation - waving, bowing, eating MOBSI animations - bed, alchemy table, anvil Item animations - sweeping the floor with a broomstick, using the horn, playing the lute Mandatory animations - running, walking, sneaking Combined/interpolated animations - picking stuff up, aiming with a bow/crossbow All of these animations are defined in a MDS file about which we will talk about in the next section.","title":"Overview"},{"location":"Animation/#animation","text":"Info Some of the videos that I write about in the text bellow are in this play-list . Acknowledgment This tutorial wouldn't be possible without the ZenGin documentation available in the mod-kit, Mark56 who helped me understand animations in the first place. [Fawkes] and his request for me to do some animations for his excellent mod - Replay Mod. And flosha from the Phoenix team, who was the one, to whom I offered to write this tutorial, to help with the development of the Phoenix project .","title":"Animation"},{"location":"Animation/#animations-in-zengin","text":"Animations (apart from maybe advanced programming work using Ikarus or Union) are on of the most advanced modding techniques, since you not only must understand the way they work, but also know how to write the animation script and understand the whole sceme selection system, naming convention and of course know how to animate (that is my biggest problem :D). To get a new animation into ZenGin (the Gothic engine) is not difficult per se, I would describe it as tedious. Luckily, there are tools to help us to achieve our goal - get a new animation to be used by the engine, and in effect, to be used and seen in the game. To describe the whole process, I constructed this small tutorial, to help other people to get animations working and to spare them many hours of searching the excellent forum posts, that describe parts of the process.","title":"Animations in ZenGin"},{"location":"Animation/#prerequisites-tools-materials","text":"Gothic MDK (Mod Development Kit) Gothic 1 MDK - link Gothic 2 MDK - link Blender Kerrax's Import Export plugin - follow the installation instructions to install the plugin, make sure to set up the texture paths too Tool for decompiling animations GothicSourcer , or use phoenix or write your own using ZenLib","title":"Prerequisites - Tools &amp; Materials"},{"location":"Animation/#the-work-flow","text":"This is the basic step-by-step on how to get the animation into the game. Load the actor (character or object) into your 3D software Create your animation Export the animation as an .asc file Write the MDS file Run the game to compile your animations Test your animations in-game using a Daedalus script or a console command That all sound great, but how do you actually do it? Even though, the steps start with loading the actor into blender, I think it is much more important, to understand the system of animations, to get high quality assets into your mod.","title":"The work flow"},{"location":"Animation/#animation-types","text":"There are two main types of animations - skeletal and morphmesh animations. Character body animations are skeletal - meaning we animate a skeleton and the entire model (skin) moves around it. And the morph mesh animation, that is used for facial animations (eating, blinking, talking,...) and for animated meshes (wavy water ferns, fish in Khorinis' harbor,...). The animations we are concerned with are the skeletal ones. I divide them into few types myself - I hope to have a demonstration on how to make each on of them. Standalone animation - waving, bowing, eating MOBSI animations - bed, alchemy table, anvil Item animations - sweeping the floor with a broomstick, using the horn, playing the lute Mandatory animations - running, walking, sneaking Combined/interpolated animations - picking stuff up, aiming with a bow/crossbow All of these animations are defined in a MDS file about which we will talk about in the next section.","title":"Animation \"types\""},{"location":"DirectoryStructure/","text":"ZenGin directory structure Modding is all about changing the game files and for that we have to know the directory (folder) structure of a Gothic game. \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 $Templates$ \u2502 \u251c\u2500\u2500 modvdf \u2502 \u2514\u2500\u2500 plugins \u251c\u2500\u2500 Miles \u251c\u2500\u2500 Saves \u251c\u2500\u2500 System \u2502 \u2514\u2500\u2500 Autorun \u2514\u2500\u2500 _work \u2514\u2500\u2500 DATA \u251c\u2500\u2500 Anims \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Meshes \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Music \u251c\u2500\u2500 PRESETS \u251c\u2500\u2500 Scripts \u2502 \u251c\u2500\u2500 _compiled \u2502 \u2514\u2500\u2500 content \u2502 \u2514\u2500\u2500 CUTSCENE \u251c\u2500\u2500 Sound \u251c\u2500\u2500 Textures \u251c\u2500\u2500 Video \u2514\u2500\u2500 Worlds Data Data directory contains .vdf volumes of the game. These contain anims.vdf - animations, speech.vdf - dubbing, worlds.vdf - world ZEN files. Saves Contains saved games. System The system directory contains the game executable, GothicStarter.exe , GothicStarter_mod.exe , configuration .ini files, mod .ini files and mod icons and description .rtf files. system/Autorun is a Union specific directory, it is default search directory for Daedalus injection scripts with zParserExtender and Union plugins. _work/DATA This is where the magic happens: Anims - contains animations and animated models. _compiled - contains compiled animations Meshes - contains meshes source and compiled files. _compiled - contains compiled meshes Music - contains music files. Scripts _compiled - contains compiled scripts - .dat files Content - contains scripts that make up the content of the game. System - contains scripts that make up the menu. Sound - contains sound effects .wav or .ogg format (only Union) Video - contains videos in .bik format","title":"Directory structure"},{"location":"DirectoryStructure/#zengin-directory-structure","text":"Modding is all about changing the game files and for that we have to know the directory (folder) structure of a Gothic game. \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 $Templates$ \u2502 \u251c\u2500\u2500 modvdf \u2502 \u2514\u2500\u2500 plugins \u251c\u2500\u2500 Miles \u251c\u2500\u2500 Saves \u251c\u2500\u2500 System \u2502 \u2514\u2500\u2500 Autorun \u2514\u2500\u2500 _work \u2514\u2500\u2500 DATA \u251c\u2500\u2500 Anims \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Meshes \u2502 \u2514\u2500\u2500 _Compiled \u251c\u2500\u2500 Music \u251c\u2500\u2500 PRESETS \u251c\u2500\u2500 Scripts \u2502 \u251c\u2500\u2500 _compiled \u2502 \u2514\u2500\u2500 content \u2502 \u2514\u2500\u2500 CUTSCENE \u251c\u2500\u2500 Sound \u251c\u2500\u2500 Textures \u251c\u2500\u2500 Video \u2514\u2500\u2500 Worlds","title":"ZenGin directory structure"},{"location":"DirectoryStructure/#data","text":"Data directory contains .vdf volumes of the game. These contain anims.vdf - animations, speech.vdf - dubbing, worlds.vdf - world ZEN files.","title":"Data"},{"location":"DirectoryStructure/#saves","text":"Contains saved games.","title":"Saves"},{"location":"DirectoryStructure/#system","text":"The system directory contains the game executable, GothicStarter.exe , GothicStarter_mod.exe , configuration .ini files, mod .ini files and mod icons and description .rtf files. system/Autorun is a Union specific directory, it is default search directory for Daedalus injection scripts with zParserExtender and Union plugins.","title":"System"},{"location":"DirectoryStructure/#_workdata","text":"This is where the magic happens: Anims - contains animations and animated models. _compiled - contains compiled animations Meshes - contains meshes source and compiled files. _compiled - contains compiled meshes Music - contains music files. Scripts _compiled - contains compiled scripts - .dat files Content - contains scripts that make up the content of the game. System - contains scripts that make up the menu. Sound - contains sound effects .wav or .ogg format (only Union) Video - contains videos in .bik format","title":"_work/DATA"},{"location":"Genome/","text":"Genome engine Genome engine is new engine created by Piranha Bytes created for the game Gothic 3 and later used for the Risen and ELEX series of games.","title":"Genome engine"},{"location":"Genome/#genome-engine","text":"Genome engine is new engine created by Piranha Bytes created for the game Gothic 3 and later used for the Risen and ELEX series of games.","title":"Genome engine"},{"location":"GettingStarted_ZenGin/","text":"Getting started (ZenGin - Gothic 1 & 2) To get started, you will need Gothic MDK (Mod development kit). MDK contains scripts, engine documentation, tutorials and tools to help you create your own modifications. - Gothic 1 MDK - Gothic 2 MDK - link not yet available MDK Contents The MDK contains a lot of things, let's see whats's inside. Scripts Arguably the most important part of the MDK are the original scripts. ZenGin's scripting language is called Daedalus and the scripts use .d file extension. Most of the functionality in the game is run by these scripts, from human and monster AI, to the routines of NPC, when do they go to bed, when (and where) do they pee, what items should NPCs have in their inventory, how much damage or how valuable an item should be. Of course some things are hard coded in the engine, but there are ways to alter their behaviour, we will discuss that in a later article. TODO: finish this :trollface:","title":"Getting started (ZenGin - Gothic 1 & 2)"},{"location":"GettingStarted_ZenGin/#getting-started-zengin-gothic-1-2","text":"To get started, you will need Gothic MDK (Mod development kit). MDK contains scripts, engine documentation, tutorials and tools to help you create your own modifications. - Gothic 1 MDK - Gothic 2 MDK - link not yet available","title":"Getting started (ZenGin - Gothic 1 &amp; 2)"},{"location":"GettingStarted_ZenGin/#mdk-contents","text":"The MDK contains a lot of things, let's see whats's inside.","title":"MDK Contents"},{"location":"GettingStarted_ZenGin/#scripts","text":"Arguably the most important part of the MDK are the original scripts. ZenGin's scripting language is called Daedalus and the scripts use .d file extension. Most of the functionality in the game is run by these scripts, from human and monster AI, to the routines of NPC, when do they go to bed, when (and where) do they pee, what items should NPCs have in their inventory, how much damage or how valuable an item should be. Of course some things are hard coded in the engine, but there are ways to alter their behaviour, we will discuss that in a later article. TODO: finish this :trollface:","title":"Scripts"},{"location":"GothicVDFS/","text":"GothicVDFS Gothic VDFS is still the most popular VDFS tool. It was created by NicoDE. Download You can download the tool from NicoDE's website - direct link . Quick overview","title":"GothicVDFS"},{"location":"GothicVDFS/#gothicvdfs","text":"Gothic VDFS is still the most popular VDFS tool. It was created by NicoDE.","title":"GothicVDFS"},{"location":"GothicVDFS/#download","text":"You can download the tool from NicoDE's website - direct link .","title":"Download"},{"location":"GothicVDFS/#quick-overview","text":"","title":"Quick overview"},{"location":"MDS/","text":"MDS - model animation script Model animation script is a file, that describes what skeleton is to be used, what body meshes work with this set of animations and how the animations should be named, how fast they run, what animation is supposed to run after the current one is finished and much more. These files are located in Gothic\\_work\\DATA\\Anims\\ directory. You will see a lot of long and scary code, but it is actually very simple, lets learn what some of the most important commands mean. Don't forget to use the search If you search this file for t_Yes , you will get a example of the first type of animation - \"standalone\" To play the animation in game you use this console command play ani t_yes . Syntax and keywords Before we get into the keywords, lets get a quick look at the naming convention, to get a basic idea what is going on. The first letter indicates a type of animation (transition - t_ - or state - s_ ). Then depending on the animation type we have: Transition animation t_Run_2_Sneak Transition animation from the run animation to the sneak animation. t_BSANVIL_Stand_2_S0 Transition animation for the blacksmith's anvil from standing to state 0. State animation s_Run State animation for the looping animation. s_BSANVIL_S0 State animation for the blacksmith's anvil and its first state. ani This is the main command you will be using while defining new animations. Example: ani ( \"t_Yes\" 2 \"\" 0.1 0.1 M . \"Hum_Yes_M01.asc\" F 1 44 ) Syntax: ani ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ASC_NAME ANI_DIR START_FRAME END_FRAME ) ani - is a keyword, we are defining new animation Let's describe all of the parameters ANI_NAME - animation name, we use it in Daedalus as animation identifier There is a naming convention, that is recommended (and sometimes required) to be used. prefix t_ - transition animations prefix s_ - state animations - they usually run in a loop prefix c_ - animations used for animation combining/interpolation LAYER - layer number for multi-layer animations NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start If we set it to 0.5, it takes 0.5 seconds for this animation to take full effect. At 0.0 s the previous animation has full effect on the bones of the skeleton, at 0.1 s it is influenced by 20% by this animation and at 0.5s it is completely influenced by this animation and the previous one has no effect. BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behavior M - specifies a movement animation, the animation of the model translates into a changed position in the game world R - the same as M but for rotation E - this flag makes this animation run only, if the animation in the same layer are finished, this is used in the movement animations. The animation s_walk (walking loop animation) runs, when the player is walking,when he stops the transition animation to standing state is played t_walk_2_stand . This animation uses the E flag to wait for the walk cycle animation to finish, to smoothly transition into the standing state. F - the engine ignores height coordinate - doesn't keep the model \"glued\" to the ground (falling/flying animation) I - specifies idle animation - breathing, standing with a drawn weapon and moving the weapon... ASC_NAME - name of the source file exported from Blender ANI_DIR - direction of the animation F - forward R - reverse START_FRAME - on what frame from the source file the animation starts END_FRAME - on what frame from the source file the animation ends aniAlias This is probably the second most useful command, it is used to do, what its name suggests it does, and that is creating a alias (similar to hard link for my fellow unix users) for already defined animations. Example: aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) Syntax: aniAlias ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ALIAS_NAME ANI_DIR ) ANI_NAME - name of the new animation LAYER - layer the animation is on NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behaviour ALIAS_NAME - name of the animation we want to use as a source for the alias ANI_DIR - direction of the animation If we look for the animation in the example we can see, that there is a related one just one line above ani ( \"t_Run_2_Sneak\" 1 \"s_Sneak\" 0.1 0.0 M . \"Hum_Sneak_M01.asc\" F 0 10 ) aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) In this example we are defining t_Sneak_2_Run animation, we specify, that the animation after this one is finished will be s_Run and that it is being made by reversing animation t_Run_2_Sneak by specifying the R flag. aniBlend AniBlend is used to define animations that are a result of blending of two animations. This animation is not animated by hand, but it is dynamically generated by the engine during run-time. Example aniBlend ( \"t_RunR_2_Run\" \"s_Run\" 0.2 0.2 ) Syntax: aniBlend ( ANI_NAME NEXT_ANI BLEND_IN BLEND_OUT ) ANI_NAME - name of the new animation NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end aniSync TODO: I think this one is not used. aniBatch Not tested in engine - probably doesn't work well, isn't used in any of the games. Probably not wise to use it.","title":"MDS - ModelScript"},{"location":"MDS/#mds-model-animation-script","text":"Model animation script is a file, that describes what skeleton is to be used, what body meshes work with this set of animations and how the animations should be named, how fast they run, what animation is supposed to run after the current one is finished and much more. These files are located in Gothic\\_work\\DATA\\Anims\\ directory. You will see a lot of long and scary code, but it is actually very simple, lets learn what some of the most important commands mean. Don't forget to use the search If you search this file for t_Yes , you will get a example of the first type of animation - \"standalone\" To play the animation in game you use this console command play ani t_yes .","title":"MDS - model animation script"},{"location":"MDS/#syntax-and-keywords","text":"Before we get into the keywords, lets get a quick look at the naming convention, to get a basic idea what is going on. The first letter indicates a type of animation (transition - t_ - or state - s_ ). Then depending on the animation type we have: Transition animation t_Run_2_Sneak Transition animation from the run animation to the sneak animation. t_BSANVIL_Stand_2_S0 Transition animation for the blacksmith's anvil from standing to state 0. State animation s_Run State animation for the looping animation. s_BSANVIL_S0 State animation for the blacksmith's anvil and its first state.","title":"Syntax and keywords"},{"location":"MDS/#ani","text":"This is the main command you will be using while defining new animations. Example: ani ( \"t_Yes\" 2 \"\" 0.1 0.1 M . \"Hum_Yes_M01.asc\" F 1 44 ) Syntax: ani ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ASC_NAME ANI_DIR START_FRAME END_FRAME ) ani - is a keyword, we are defining new animation Let's describe all of the parameters ANI_NAME - animation name, we use it in Daedalus as animation identifier There is a naming convention, that is recommended (and sometimes required) to be used. prefix t_ - transition animations prefix s_ - state animations - they usually run in a loop prefix c_ - animations used for animation combining/interpolation LAYER - layer number for multi-layer animations NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start If we set it to 0.5, it takes 0.5 seconds for this animation to take full effect. At 0.0 s the previous animation has full effect on the bones of the skeleton, at 0.1 s it is influenced by 20% by this animation and at 0.5s it is completely influenced by this animation and the previous one has no effect. BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behavior M - specifies a movement animation, the animation of the model translates into a changed position in the game world R - the same as M but for rotation E - this flag makes this animation run only, if the animation in the same layer are finished, this is used in the movement animations. The animation s_walk (walking loop animation) runs, when the player is walking,when he stops the transition animation to standing state is played t_walk_2_stand . This animation uses the E flag to wait for the walk cycle animation to finish, to smoothly transition into the standing state. F - the engine ignores height coordinate - doesn't keep the model \"glued\" to the ground (falling/flying animation) I - specifies idle animation - breathing, standing with a drawn weapon and moving the weapon... ASC_NAME - name of the source file exported from Blender ANI_DIR - direction of the animation F - forward R - reverse START_FRAME - on what frame from the source file the animation starts END_FRAME - on what frame from the source file the animation ends","title":"ani"},{"location":"MDS/#anialias","text":"This is probably the second most useful command, it is used to do, what its name suggests it does, and that is creating a alias (similar to hard link for my fellow unix users) for already defined animations. Example: aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) Syntax: aniAlias ( ANI_NAME LAYER NEXT_ANI BLEND_IN BLEND_OUT FLAGS ALIAS_NAME ANI_DIR ) ANI_NAME - name of the new animation LAYER - layer the animation is on NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end FLAGS - flags, that describe animation behaviour ALIAS_NAME - name of the animation we want to use as a source for the alias ANI_DIR - direction of the animation If we look for the animation in the example we can see, that there is a related one just one line above ani ( \"t_Run_2_Sneak\" 1 \"s_Sneak\" 0.1 0.0 M . \"Hum_Sneak_M01.asc\" F 0 10 ) aniAlias ( \"t_Sneak_2_Run\" 1 \"s_Run\" 0.0 0.1 M . \"t_Run_2_Sneak\" R ) In this example we are defining t_Sneak_2_Run animation, we specify, that the animation after this one is finished will be s_Run and that it is being made by reversing animation t_Run_2_Sneak by specifying the R flag.","title":"aniAlias"},{"location":"MDS/#aniblend","text":"AniBlend is used to define animations that are a result of blending of two animations. This animation is not animated by hand, but it is dynamically generated by the engine during run-time. Example aniBlend ( \"t_RunR_2_Run\" \"s_Run\" 0.2 0.2 ) Syntax: aniBlend ( ANI_NAME NEXT_ANI BLEND_IN BLEND_OUT ) ANI_NAME - name of the new animation NEXT_ANI - name of the next animations BLEND_IN - time in seconds describing animation blending at the start BLEND_OUT - time in seconds describing animation blending at the end","title":"aniBlend"},{"location":"MDS/#anisync","text":"TODO: I think this one is not used.","title":"aniSync"},{"location":"MDS/#anibatch","text":"Not tested in engine - probably doesn't work well, isn't used in any of the games. Probably not wise to use it.","title":"aniBatch"},{"location":"Meshes/","text":"Meshes Everything about 3D models in ZenGin.","title":"Overview"},{"location":"Meshes/#meshes","text":"Everything about 3D models in ZenGin.","title":"Meshes"},{"location":"Music/","text":"Music How to get your custom music.","title":"Overview"},{"location":"Music/#music","text":"How to get your custom music.","title":"Music"},{"location":"Scripts/","text":"Scripts ZenGin uses its own scripting language called Daedalus. It is similar to C programming language, so if you know some C programming, it will be quite easy to ge started. The Scripts directory is where the scripts live. You will be able to find Daedalus script files - .d extension and .src files, that list all of the files to be compiled.","title":"Overview"},{"location":"Scripts/#scripts","text":"ZenGin uses its own scripting language called Daedalus. It is similar to C programming language, so if you know some C programming, it will be quite easy to ge started. The Scripts directory is where the scripts live. You will be able to find Daedalus script files - .d extension and .src files, that list all of the files to be compiled.","title":"Scripts"},{"location":"Sound/","text":"Sound Sound effects and dialogues are sound files playing durning the game. This is Gothic VDFS. It's a tool that allows you to pack and unpack files in .VDF and .MOD format. Let us start with unpacking \"Sound\" file: In the \"(Viewer)\" tab, in the \"Filename\", go to your Gothic or Gothic II/Data folder and choose \"Sound.VDF\"; Create a folder on your desktop or any other easily accessible place on your computer. Name it however you want; Go to \"Root path\" and choose the folder you just created; Press \"Extract volume\" if you want to unpack all sound files. The chosen file should be unpacking right now. Now, here are the files we just extracted: A lot of times it can be tricky to find the sound you are looking for, but that we'll leave for later. Now let's just see how can we change a sound file in the game. Get yourself any short sound file; In order for the sound to work in the game, it needs to be in mono .wav format. A lot of programs let you convert a file, like Audacity, so do just that; Rename your converted file into \"INV_CHANGE.WAV\" and replace it in SFX folder you just extracted; Go back to Gothic VDFS, go to (Builder) tab; In \"Filename\" you choose how do you want your file to be called and the location it's created in. I recommend creating separate folder and making it there. You can also name the file however you want, as long as it has higher time stamp (more on that later) than original Sounds file. To create is as .VDF file, in the \"Save file as\" choose \"All file\" and call it \"Sounds.VDF\"; In \"Root path\" go to and choose \"_WORK\" folder; In the field just below \"Comment\", add a * character then click on the + next to it; Press \"Build\", and if you did everything right, the folder is being packed back into .VDF file; That's how a successful process looks like: Now, get the file you just created, and put it in your Gothic/Data folder, replacing the old one. The file we just replaced changes the sound in main menu and the inventory. If you can hear it, congratulations, you did it!","title":"Overview"},{"location":"Sound/#sound","text":"Sound effects and dialogues are sound files playing durning the game. This is Gothic VDFS. It's a tool that allows you to pack and unpack files in .VDF and .MOD format. Let us start with unpacking \"Sound\" file: In the \"(Viewer)\" tab, in the \"Filename\", go to your Gothic or Gothic II/Data folder and choose \"Sound.VDF\"; Create a folder on your desktop or any other easily accessible place on your computer. Name it however you want; Go to \"Root path\" and choose the folder you just created; Press \"Extract volume\" if you want to unpack all sound files. The chosen file should be unpacking right now. Now, here are the files we just extracted: A lot of times it can be tricky to find the sound you are looking for, but that we'll leave for later. Now let's just see how can we change a sound file in the game. Get yourself any short sound file; In order for the sound to work in the game, it needs to be in mono .wav format. A lot of programs let you convert a file, like Audacity, so do just that; Rename your converted file into \"INV_CHANGE.WAV\" and replace it in SFX folder you just extracted; Go back to Gothic VDFS, go to (Builder) tab; In \"Filename\" you choose how do you want your file to be called and the location it's created in. I recommend creating separate folder and making it there. You can also name the file however you want, as long as it has higher time stamp (more on that later) than original Sounds file. To create is as .VDF file, in the \"Save file as\" choose \"All file\" and call it \"Sounds.VDF\"; In \"Root path\" go to and choose \"_WORK\" folder; In the field just below \"Comment\", add a * character then click on the + next to it; Press \"Build\", and if you did everything right, the folder is being packed back into .VDF file; That's how a successful process looks like: Now, get the file you just created, and put it in your Gothic/Data folder, replacing the old one. The file we just replaced changes the sound in main menu and the inventory. If you can hear it, congratulations, you did it!","title":"Sound"},{"location":"StandaloneAni/","text":"Standalone animation Let's start with the easiest animation, lets make a very simple gesturing animation. First we have to have the animation source files ready, I usually decompile them using Gothic Sourcer . In GothicSourcer you choose Tools > Decompiler models > Dynamic (MDS or MSB) and choose a MDS file of your choice - Humans.mds in our case and then click the decompile button. Animating Open Blender, File > Import > Kerrax ASCII model (.asc) , navigate to the folder with your decompiled animation files and select HUM_BODY_NAKED0.ASC , this file contains the skeleton and skin model for human NPCs. What bone hierarchy is this model using? From the .mds file, if you open it again, there is a command meshAndTree that specifies, what model contains the skeleton. And there lies our answer: Model ( \"HuS\" ) { meshAndTree ( \"Hum_Body_Naked0.ASC\" DONT_USE_MESH ) A windows pops up, you can read some interesting information about the model you are about to import, what we are interested in is, that Completely replace current scene is ticked, we want to use Armature modifier and we also want to Try to connect bones and Use sample meshes from folder . You should provide a path to a directory with the sample meshes - these are meshes for items, that usually go into slot bones. And lastly, the space transformation scale should be set to 0.01 , this is because ZenGin works with centimeter units and one unit in Blender is a meter. Click import and wait for the magic to happen. This video shows a freshly imported model with all of the default meshes. Note Now if we wanted to play (or edit) existing animation, we can now load it on top of this. Just do as before File > Import > Kerrax ASCII model (.asc) and select different animation file (or armour file) for example Hum_SmokeHerb_Layer_M01.asc for a animation file. Gothic characters are modular, you can change their heads on the fly (during gameplay even, as seen in this amazing video of my dear friend and colleague Fawkes - Head changing ), let's add a head, so we can see how the whole body will behave while we are animating. File > Import > Kerrax ASCII model (.asc) and navigate to your head model (for this, you will have to decompile it, like we did with the body itself). I will import HUM_HEAD_PONY.ASC . Please make sure to select the target bone for importing Bip01 Head , this will attach the head to the proper bone, just like the engine does it. Now we have everything ready to start animating. The video shows the DopeSheet a nice way to edit keyframes. DopeSheet Blender's dope sheet can be used to copy entire sets of keyframes. Useful if we want to create a looping animation. We can import an animation into Blender as a base. Tip If you don't know, what the animation is called, just go into the game, and make your character to perform the animation you want, while in MARVIN mode, you can press G and the animation information (and some other info too) will be displayed right on the screen In this video you can see, that the idle standing animation is s_run . Because we want to make an animation, that is going to start from this idle animation, we will import it into blender. Where do we find it? Just look into the .mds file, look for s_run name and get the name of the file. ani ( \"s_Run\" 1 \"s_Run\" 0.1 0.1 MI \"Hum_RunAmbient_M01.asc\" F 1 50 ) As we can see, we have to import the Hum_RunAmbient_M01.asc file. Next goes the first trick. Since we want our animation to end exactly, as it started - wither because we want the hero to continue his standing animation, or we want to make a looping animation we somehow have to copy the pose. I use the DopeSheet screen, to delete all keyframes and then copy the keyframe set from keyframe number 0 and then drag it somewhere to the end of the timeline. Once the animation is done, we have to export it into a asc format again, File > Export > Kerrax ASCII model (.asc) and then save it to _work\\data\\Anims\\asc\\ so the engine can see it and convert it. There are many options here, that we will explore later, but we have tick Export animation and pick bones that we want to export - this is useful for animations that are played on different layers (dialoge gestures, scratching head, scratching a shoulder,...). Animation script Now, that we have exported the animation, now we have to define it in Humans.mds . Open the file, scroll to the end and define a new animation. Attention All ani code has to be between the curly brackets, this means you have to insert it before the last two closing curly brackets } } . Let's write it ani ( \"t_backpain\" 1 \"\" 0.0 0.0 M . \"Hum_back.ASC\" F 0 121 ) Save the Humans.mds file and try it in game. Nothing happens! The reason is, the mds has been already compiled and we have to recompile it. The easiest is to go to Anims\\_compiled and delete HUMANS.MSB . Run the game and try to play the animation again ( play ani t_backpain in MARVIN console) now everything should work. Amazing, now you have your first animation in the game. And you can use it to do some fun stuff, like in dialogues using the AI_PlayAni function. Example dialogue instance DIA_Xardas_Back ( C_INFO ) { npc = NONE_100_Xardas ; nr = 11 ; condition = DIA_Xardas_Back_Condition ; information = DIA_Xardas_Back_Info ; permanent = TRUE ; description = \"What's wrong?\" ; }; func int DIA_Xardas_Back_Condition () { return TRUE ; }; func void DIA_Xardas_Back_Info () { AI_Output ( self , hero , \"DIA_Xardas_MOB_14_00\" ); // My back hurts so much. // This is our animation!!!!! AI_PlayAni ( self , \"T_BACKPAIN\" ); AI_Output ( self , hero , \"DIA_Xardas_MOB_14_01\" ); // How do YOU feel? AI_Output ( hero , self , \"DIA_Xardas_MOB_14_02\" ); // My back is fine. AI_StopProcessInfos ( self ); };","title":"Standalone animation"},{"location":"StandaloneAni/#standalone-animation","text":"Let's start with the easiest animation, lets make a very simple gesturing animation. First we have to have the animation source files ready, I usually decompile them using Gothic Sourcer . In GothicSourcer you choose Tools > Decompiler models > Dynamic (MDS or MSB) and choose a MDS file of your choice - Humans.mds in our case and then click the decompile button.","title":"Standalone animation"},{"location":"StandaloneAni/#animating","text":"Open Blender, File > Import > Kerrax ASCII model (.asc) , navigate to the folder with your decompiled animation files and select HUM_BODY_NAKED0.ASC , this file contains the skeleton and skin model for human NPCs. What bone hierarchy is this model using? From the .mds file, if you open it again, there is a command meshAndTree that specifies, what model contains the skeleton. And there lies our answer: Model ( \"HuS\" ) { meshAndTree ( \"Hum_Body_Naked0.ASC\" DONT_USE_MESH ) A windows pops up, you can read some interesting information about the model you are about to import, what we are interested in is, that Completely replace current scene is ticked, we want to use Armature modifier and we also want to Try to connect bones and Use sample meshes from folder . You should provide a path to a directory with the sample meshes - these are meshes for items, that usually go into slot bones. And lastly, the space transformation scale should be set to 0.01 , this is because ZenGin works with centimeter units and one unit in Blender is a meter. Click import and wait for the magic to happen. This video shows a freshly imported model with all of the default meshes. Note Now if we wanted to play (or edit) existing animation, we can now load it on top of this. Just do as before File > Import > Kerrax ASCII model (.asc) and select different animation file (or armour file) for example Hum_SmokeHerb_Layer_M01.asc for a animation file. Gothic characters are modular, you can change their heads on the fly (during gameplay even, as seen in this amazing video of my dear friend and colleague Fawkes - Head changing ), let's add a head, so we can see how the whole body will behave while we are animating. File > Import > Kerrax ASCII model (.asc) and navigate to your head model (for this, you will have to decompile it, like we did with the body itself). I will import HUM_HEAD_PONY.ASC . Please make sure to select the target bone for importing Bip01 Head , this will attach the head to the proper bone, just like the engine does it. Now we have everything ready to start animating. The video shows the DopeSheet a nice way to edit keyframes. DopeSheet Blender's dope sheet can be used to copy entire sets of keyframes. Useful if we want to create a looping animation. We can import an animation into Blender as a base. Tip If you don't know, what the animation is called, just go into the game, and make your character to perform the animation you want, while in MARVIN mode, you can press G and the animation information (and some other info too) will be displayed right on the screen In this video you can see, that the idle standing animation is s_run . Because we want to make an animation, that is going to start from this idle animation, we will import it into blender. Where do we find it? Just look into the .mds file, look for s_run name and get the name of the file. ani ( \"s_Run\" 1 \"s_Run\" 0.1 0.1 MI \"Hum_RunAmbient_M01.asc\" F 1 50 ) As we can see, we have to import the Hum_RunAmbient_M01.asc file. Next goes the first trick. Since we want our animation to end exactly, as it started - wither because we want the hero to continue his standing animation, or we want to make a looping animation we somehow have to copy the pose. I use the DopeSheet screen, to delete all keyframes and then copy the keyframe set from keyframe number 0 and then drag it somewhere to the end of the timeline. Once the animation is done, we have to export it into a asc format again, File > Export > Kerrax ASCII model (.asc) and then save it to _work\\data\\Anims\\asc\\ so the engine can see it and convert it. There are many options here, that we will explore later, but we have tick Export animation and pick bones that we want to export - this is useful for animations that are played on different layers (dialoge gestures, scratching head, scratching a shoulder,...).","title":"Animating"},{"location":"StandaloneAni/#animation-script","text":"Now, that we have exported the animation, now we have to define it in Humans.mds . Open the file, scroll to the end and define a new animation. Attention All ani code has to be between the curly brackets, this means you have to insert it before the last two closing curly brackets } } . Let's write it ani ( \"t_backpain\" 1 \"\" 0.0 0.0 M . \"Hum_back.ASC\" F 0 121 ) Save the Humans.mds file and try it in game. Nothing happens! The reason is, the mds has been already compiled and we have to recompile it. The easiest is to go to Anims\\_compiled and delete HUMANS.MSB . Run the game and try to play the animation again ( play ani t_backpain in MARVIN console) now everything should work. Amazing, now you have your first animation in the game. And you can use it to do some fun stuff, like in dialogues using the AI_PlayAni function.","title":"Animation script"},{"location":"StandaloneAni/#example-dialogue","text":"instance DIA_Xardas_Back ( C_INFO ) { npc = NONE_100_Xardas ; nr = 11 ; condition = DIA_Xardas_Back_Condition ; information = DIA_Xardas_Back_Info ; permanent = TRUE ; description = \"What's wrong?\" ; }; func int DIA_Xardas_Back_Condition () { return TRUE ; }; func void DIA_Xardas_Back_Info () { AI_Output ( self , hero , \"DIA_Xardas_MOB_14_00\" ); // My back hurts so much. // This is our animation!!!!! AI_PlayAni ( self , \"T_BACKPAIN\" ); AI_Output ( self , hero , \"DIA_Xardas_MOB_14_01\" ); // How do YOU feel? AI_Output ( hero , self , \"DIA_Xardas_MOB_14_02\" ); // My back is fine. AI_StopProcessInfos ( self ); };","title":"Example dialogue"},{"location":"Textures/","text":"Textures Textures are pictures, that get projected on 3D models and onto 2D user interface in the game. In this section we will discuss how to work with textures.","title":"Overview"},{"location":"Textures/#textures","text":"Textures are pictures, that get projected on 3D models and onto 2D user interface in the game. In this section we will discuss how to work with textures.","title":"Textures"},{"location":"VDFS/","text":"VDFS VDFS is the virtual file system used by ZenGin to distribute and store many (but not all) game assest. Tools During the years, the community created different tools to work with VDFS volumes. GothicVDFS viewing extracting bulding .mod and .vdf archives VDFS Tool viewing extracting bulding optimizing compressing .mod and .vdf archives","title":"Virtual file system"},{"location":"VDFS/#vdfs","text":"VDFS is the virtual file system used by ZenGin to distribute and store many (but not all) game assest.","title":"VDFS"},{"location":"VDFS/#tools","text":"During the years, the community created different tools to work with VDFS volumes. GothicVDFS viewing extracting bulding .mod and .vdf archives VDFS Tool viewing extracting bulding optimizing compressing .mod and .vdf archives","title":"Tools"},{"location":"VDFSTool/","text":"VDFS Tool VDFS Tool is a new program that supports new features introduced to VDFS by the Union team. Like ZIP compression or drag and drop support. Download You can download the tool from the post on WoP.ru - VDFS Tool or using the Resource Manager Quick overview","title":"VDFS Tool"},{"location":"VDFSTool/#vdfs-tool","text":"VDFS Tool is a new program that supports new features introduced to VDFS by the Union team. Like ZIP compression or drag and drop support.","title":"VDFS Tool"},{"location":"VDFSTool/#download","text":"You can download the tool from the post on WoP.ru - VDFS Tool or using the Resource Manager","title":"Download"},{"location":"VDFSTool/#quick-overview","text":"","title":"Quick overview"},{"location":"Video/","text":"Video To get a video cutscene, intro or outro into the game the video needs to be in a proper format - BINK video format .bik . Editing the video Okay, I know this might be a bit out of the scope of this, but the video you recorded has to be edited. My go to editor for this is kdenlive . It works very well, it is free and open source and it supports BINK video as an input, which is great if you want to include subtitles in the video. My version of kdenlive does not knw how to export video straight to .bik , so I just export my video to .mp4 and then convert it with RAD Video Tools. RAD Video Tools RAD Video Tools is a tool for converting other video formats to BINK .bik that Gothic can use. Warning Gothic 1 bink implementation has some problems, in RAD tools you have to set the audio compression to 104 and above to get video to work in Gothic 1. NicoDE's comment: Add 100 to the audio compression level when encoding videos, e.g. 104 for level 4 with old sound format (should be mentioned in the RAD Video Tools documentation) for G1 without updated Miles libraries. Note Newest Union (1.0m at the time of writing) has a new patch for BINK video playback. The issue with sound should be fixed.","title":"Overview"},{"location":"Video/#video","text":"To get a video cutscene, intro or outro into the game the video needs to be in a proper format - BINK video format .bik .","title":"Video"},{"location":"Video/#editing-the-video","text":"Okay, I know this might be a bit out of the scope of this, but the video you recorded has to be edited. My go to editor for this is kdenlive . It works very well, it is free and open source and it supports BINK video as an input, which is great if you want to include subtitles in the video. My version of kdenlive does not knw how to export video straight to .bik , so I just export my video to .mp4 and then convert it with RAD Video Tools.","title":"Editing the video"},{"location":"Video/#rad-video-tools","text":"RAD Video Tools is a tool for converting other video formats to BINK .bik that Gothic can use. Warning Gothic 1 bink implementation has some problems, in RAD tools you have to set the audio compression to 104 and above to get video to work in Gothic 1. NicoDE's comment: Add 100 to the audio compression level when encoding videos, e.g. 104 for level 4 with old sound format (should be mentioned in the RAD Video Tools documentation) for G1 without updated Miles libraries. Note Newest Union (1.0m at the time of writing) has a new patch for BINK video playback. The issue with sound should be fixed.","title":"RAD Video Tools"},{"location":"Worlds/","text":"Worlds Worlds, in ZenGin saved in .ZEN files, are archives that contain the world mesh (model), BSP tree and the information of all objects in the world. Spacer is used to create these .ZEN files. There are other world editors.","title":"Overview"},{"location":"Worlds/#worlds","text":"Worlds, in ZenGin saved in .ZEN files, are archives that contain the world mesh (model), BSP tree and the information of all objects in the world. Spacer is used to create these .ZEN files. There are other world editors.","title":"Worlds"},{"location":"c_item/","text":"C_ITEM Daedalus class The C_ITEM class as it is defined in Scripts/Content/_intern/Clases.d script file. CLASS C_Item { // F\u00fcr alle Items VAR INT id ; VAR STRING name , nameID ; VAR INT hp , hp_max ; VAR INT mainflag , flags ; // Hauptflag und weitere Flags VAR INT weight , value ; // F\u00fcr Waffen VAR INT damageType ; // Welche Schadensarten VAR INT damageTotal ; VAR INT damage [ DAM_INDEX_MAX ] ; // F\u00fcr R\u00fcstungen VAR INT wear ; VAR INT protection [ PROT_INDEX_MAX ]; // F\u00fcr Nahrung VAR INT nutrition ; // HP-Steigerung bei Nahrung // Ben\u00f6tigte Attribute zum Benutzen des Items VAR INT cond_atr [ 3 ] ; VAR INT cond_value [ 3 ] ; // Attribute, die bei anlegen des Items ver\u00e4ndert werden VAR INT change_atr [ 3 ] ; VAR INT change_value [ 3 ] ; // Parserfunktionen VAR FUNC magic ; // Parserfunktion zum \"Magie Header\" VAR FUNC on_equip ; // Parserfunktion, wenn Item equipped wird. VAR FUNC on_unequip ; // Parserfunktion, wenn Item unequipped wird. VAR FUNC on_state [ 4 ] ; // Besitzer VAR FUNC owner ; // Besitzer : Instanz-Name VAR INT ownerGuild ; // Besitzer : Gilde VAR INT disguiseGuild ; // Zur Schau getragene Gilde durch Verkleidung // Die 3DS-Datei VAR STRING visual ; // Ver\u00e4nderung des NSC-Meshes beim Anlegen dieses Gegenstandes VAR STRING visual_change ; // ASC - File VAR STRING effect ; // Effekt Instanz VAR INT visual_skin ; VAR STRING scemeName ; VAR INT material ; // VAR STRING pfx ; // Magic Weapon PFX VAR INT munition ; // Instance of Munition var int spell ; var int range ; var int mag_circle ; VAR STRING description ; VAR STRING text [ ITM_TEXT_MAX ] ; VAR INT count [ ITM_TEXT_MAX ] ; // inventory darstellungs geschichten, wird nur benutzt, falls von 0 abweichend var int inv_zbias ; // wie weit ist das item im inventory richtung far plane verschoben (integer scale 100=1) var int inv_rotx ; // wieviel grad um die x achse ist das item im inv gedreht var int inv_roty ; // wieviel grad um die y achse ist das item im inv gedreht var int inv_rotz ; // wieviel grad um die z achse ist das item im inv gedreht var int inv_animate ; // soll das item in inv rotiert werden }; It has many member variables, but not all of them are used for every item. But it is not necessary to define every one of these variables for every item, as it was discussed here . Creating your own item Since the C_ITEM class contains all information for every item type. As with everything, it is best to look at how it has been done in the game. You can look into your own game into the Item directory Content/Items (provided you have installed the MDK). Or Vaana's unified scripts Example: Sword As an example we can take the rusty sword you can find at the start in Gothic. Here it is in the scripts . INSTANCE ItMw_1H_Sword_Old_01 ( C_Item ) { name = \"Rusty Sword\" ; mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; visual = \"ItMw_1H_Sword_Old_01.3DS\" ; description = name ; TEXT [ 2 ] = NAME_Damage ; COUNT [ 2 ] = damageTotal ; TEXT [ 3 ] = NAME_Str_needed ; COUNT [ 3 ] = cond_value [ 2 ]; TEXT [ 4 ] = NAME_OneHanded ; TEXT [ 5 ] = NAME_Value ; COUNT [ 5 ] = value ; }; Let's go over the code. First we define new instance instance then the identifier (you may recognize these as the MARVIN mode insert codes) and then in parentheses that contain the class or prototype . Then come the curly brackets in which we define the member variables we want to. name - type string - the focus name of the item (as you can see it on the ground) mainflag - type int - determines in what inventory category the item belongs to flag - type int - determines more granular category - one handed sword, key, bow, etc. value - type int - the value of the item damageTotal - type int - how much damage the weapon does damagetype - type int - damage type (more information on Inside-gothic ) range - type int - the range of the weapon cond_atr - type int array - cond_value - type int array - visaul - type string - the model the item is going to have in-game description - name of the item in your inventory, in this case we just assign the name value text - type string array - array of strings, that shows up on the left side in the item info box count - type int array - array of integers, that shows up on the right side in the item info box","title":"C_ITEM"},{"location":"c_item/#c_item-daedalus-class","text":"The C_ITEM class as it is defined in Scripts/Content/_intern/Clases.d script file. CLASS C_Item { // F\u00fcr alle Items VAR INT id ; VAR STRING name , nameID ; VAR INT hp , hp_max ; VAR INT mainflag , flags ; // Hauptflag und weitere Flags VAR INT weight , value ; // F\u00fcr Waffen VAR INT damageType ; // Welche Schadensarten VAR INT damageTotal ; VAR INT damage [ DAM_INDEX_MAX ] ; // F\u00fcr R\u00fcstungen VAR INT wear ; VAR INT protection [ PROT_INDEX_MAX ]; // F\u00fcr Nahrung VAR INT nutrition ; // HP-Steigerung bei Nahrung // Ben\u00f6tigte Attribute zum Benutzen des Items VAR INT cond_atr [ 3 ] ; VAR INT cond_value [ 3 ] ; // Attribute, die bei anlegen des Items ver\u00e4ndert werden VAR INT change_atr [ 3 ] ; VAR INT change_value [ 3 ] ; // Parserfunktionen VAR FUNC magic ; // Parserfunktion zum \"Magie Header\" VAR FUNC on_equip ; // Parserfunktion, wenn Item equipped wird. VAR FUNC on_unequip ; // Parserfunktion, wenn Item unequipped wird. VAR FUNC on_state [ 4 ] ; // Besitzer VAR FUNC owner ; // Besitzer : Instanz-Name VAR INT ownerGuild ; // Besitzer : Gilde VAR INT disguiseGuild ; // Zur Schau getragene Gilde durch Verkleidung // Die 3DS-Datei VAR STRING visual ; // Ver\u00e4nderung des NSC-Meshes beim Anlegen dieses Gegenstandes VAR STRING visual_change ; // ASC - File VAR STRING effect ; // Effekt Instanz VAR INT visual_skin ; VAR STRING scemeName ; VAR INT material ; // VAR STRING pfx ; // Magic Weapon PFX VAR INT munition ; // Instance of Munition var int spell ; var int range ; var int mag_circle ; VAR STRING description ; VAR STRING text [ ITM_TEXT_MAX ] ; VAR INT count [ ITM_TEXT_MAX ] ; // inventory darstellungs geschichten, wird nur benutzt, falls von 0 abweichend var int inv_zbias ; // wie weit ist das item im inventory richtung far plane verschoben (integer scale 100=1) var int inv_rotx ; // wieviel grad um die x achse ist das item im inv gedreht var int inv_roty ; // wieviel grad um die y achse ist das item im inv gedreht var int inv_rotz ; // wieviel grad um die z achse ist das item im inv gedreht var int inv_animate ; // soll das item in inv rotiert werden }; It has many member variables, but not all of them are used for every item. But it is not necessary to define every one of these variables for every item, as it was discussed here .","title":"C_ITEM Daedalus class"},{"location":"c_item/#creating-your-own-item","text":"Since the C_ITEM class contains all information for every item type. As with everything, it is best to look at how it has been done in the game. You can look into your own game into the Item directory Content/Items (provided you have installed the MDK). Or Vaana's unified scripts","title":"Creating your own item"},{"location":"c_item/#example-sword","text":"As an example we can take the rusty sword you can find at the start in Gothic. Here it is in the scripts . INSTANCE ItMw_1H_Sword_Old_01 ( C_Item ) { name = \"Rusty Sword\" ; mainflag = ITEM_KAT_NF ; flags = ITEM_SWD ; material = MAT_METAL ; value = 10 ; damageTotal = 10 ; damagetype = DAM_EDGE ; range = 100 ; cond_atr [ 2 ] = ATR_STRENGTH ; cond_value [ 2 ] = 5 ; visual = \"ItMw_1H_Sword_Old_01.3DS\" ; description = name ; TEXT [ 2 ] = NAME_Damage ; COUNT [ 2 ] = damageTotal ; TEXT [ 3 ] = NAME_Str_needed ; COUNT [ 3 ] = cond_value [ 2 ]; TEXT [ 4 ] = NAME_OneHanded ; TEXT [ 5 ] = NAME_Value ; COUNT [ 5 ] = value ; }; Let's go over the code. First we define new instance instance then the identifier (you may recognize these as the MARVIN mode insert codes) and then in parentheses that contain the class or prototype . Then come the curly brackets in which we define the member variables we want to. name - type string - the focus name of the item (as you can see it on the ground) mainflag - type int - determines in what inventory category the item belongs to flag - type int - determines more granular category - one handed sword, key, bow, etc. value - type int - the value of the item damageTotal - type int - how much damage the weapon does damagetype - type int - damage type (more information on Inside-gothic ) range - type int - the range of the weapon cond_atr - type int array - cond_value - type int array - visaul - type string - the model the item is going to have in-game description - name of the item in your inventory, in this case we just assign the name value text - type string array - array of strings, that shows up on the left side in the item info box count - type int array - array of integers, that shows up on the right side in the item info box","title":"Example: Sword"}]}